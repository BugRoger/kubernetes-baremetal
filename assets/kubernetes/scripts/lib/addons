#!/usr/bin/env bash

REQUIRED_ENV+=('KUBERNETES_DNS_DOMAIN')
REQUIRED_ENV+=('KUBERNETES_DNS_ADDRESS_SERVICE')

function wait_for_api {
  echo "Waiting for Kubernetes API..."
  until curl --silent "http://127.0.0.1:8080/version" &> /dev/null
  do
    sleep 1
  done
  echo "Cluster Online. Ready for your orders, sir!"
}

function create_addons_specs {
  mkdir -p /etc/kubernetes/specs

  local template=/etc/kubernetes/specs/kube-system-namespace.yaml
  cat << EOF > ${template}
apiVersion: v1
kind: Namespace
metadata:
  name: kube-system
EOF

  local template=/etc/kubernetes/specs/kube-dns-rc.yaml
  cat << EOF > ${template}
apiVersion: v1
kind: ReplicationController
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    version: v10
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 2 
  selector:
    k8s-app: kube-dns
    version: v10
  template:
    metadata:
      labels:
        k8s-app: kube-dns
        version: v10
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: etcd
        image: gcr.io/google_containers/etcd-amd64:2.2.1
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            cpu: 100m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 50Mi
        command:
          - /usr/local/bin/etcd
          - -data-dir
          - /var/etcd/data
          - -listen-client-urls
          - http://127.0.0.1:2379,http://127.0.0.1:4001
          - -advertise-client-urls
          - http://127.0.0.1:2379,http://127.0.0.1:4001
          - -initial-cluster-token
          - skydns-etcd
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /health
            port: 2379 
          initialDelaySeconds: 60 
          timeoutSeconds: 5
        volumeMounts:
        - name: etcd-storage
          mountPath: /var/etcd/data
      - name: kube2sky
        image: gcr.io/google_containers/kube2sky:1.14
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            cpu: 100m
            # Kube2sky watches all pods.
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 50Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        args:
        # command = "/kube2sky"
        - --domain=${KUBERNETES_DNS_DOMAIN}
      - name: skydns
        image: gcr.io/google_containers/skydns:2015-10-13-8c72f8c
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 50Mi
        args:
        # command = "/skydns"
        - -machines=http://127.0.0.1:4001
        - -addr=0.0.0.0:53
        - -ns-rotate=false
        - -domain=${KUBERNETES_DNS_DOMAIN}.
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          timeoutSeconds: 5
      - name: healthz
        image: gcr.io/google_containers/exechealthz:1.0
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
        args:
        - -cmd=nslookup kubernetes.default.svc.${KUBERNETES_DNS_DOMAIN} 127.0.0.1 >/dev/null
        - -port=8080
        ports:
        - containerPort: 8080
          protocol: TCP
      volumes:
      - name: etcd-storage
        emptyDir: {}
      dnsPolicy: Default  # Don't use cluster DNS.
EOF

  local template=/etc/kubernetes/specs/kube-dns-sv.yaml
  cat << EOF > ${template}
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "KubeDNS"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: ${KUBERNETES_DNS_ADDRESS_SERVICE}
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
EOF
}

function upload_addons {
  curl -XPOST -H "Content-type: application/yaml" \
    -d"$(cat /etc/kubernetes/specs/kube-system-namespace.yaml)" \
    "http://127.0.0.1:8080/api/v1/namespaces" 

  curl -XDELETE \
    "http://127.0.0.1:8080/api/v1/namespaces/kube-system/replicationcontrollers/kube-dns" 

  curl -XDELETE \
    "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services/kube-dns" 

  curl -XPOST -H "Content-type: application/yaml" \
    -d"$(cat /etc/kubernetes/specs/kube-dns-rc.yaml)" \
    "http://127.0.0.1:8080/api/v1/namespaces/kube-system/replicationcontrollers" 

  curl -XPOST -H "Content-type: application/yaml" \
    -d"$(cat /etc/kubernetes/specs/kube-dns-sv.yaml)" \
    "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services" 
}


function setup_addons {
  create_addons_specs
  wait_for_api
  upload_addons
}
