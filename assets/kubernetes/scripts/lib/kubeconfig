#!/usr/bin/env bash

REQUIRED_ENV+=('BOOTCFG_URL')
REQUIRED_ENV+=('KUBERNETES_NODE_ADDRESS')

function get_certificate {
  local local_cert=$1

  # dirty :(
  if [ ${local_cert} = "kubelet" ] ||  [ ${local_cert} = "apiserver" ] ; then		
    local remote_cert=${local_cert}-${KUBERNETES_NODE_ADDRESS}
  else		
    local remote_cert=${local_cert}
  fi

  mkdir -p /etc/kubernetes/ssl

  wget --no-check-certificate -T 1 -O /etc/kubernetes/ssl/${local_cert}.pem     ${BOOTCFG_URL}/assets/kubernetes/ssl/${remote_cert}.pem
  wget --no-check-certificate -T 1 -O /etc/kubernetes/ssl/${local_cert}-key.pem ${BOOTCFG_URL}/assets/kubernetes/ssl/${remote_cert}-key.pem

  if [[ -f /usr/sbin/groupadd ]];
  then
    /usr/sbin/groupadd -r -f kube-cert
    chgrp kube-cert /etc/kubernetes/ssl/${local_cert}*.pem
  fi
  
  chmod 660 /etc/kubernetes/ssl/${local_cert}*.pem
}

function create_kubeconfig {
  local client=$1
  local cert=${client}.pem
  local key=${client}-key.pem

  mkdir -p /etc/kubernetes/config

  cat << EOF > /etc/kubernetes/config/${client}
apiVersion: v1
kind: Config
clusters:
  - name: local
    cluster:
       certificate-authority: /etc/kubernetes/ssl/ca.pem
       server: "https://${KUBERNETES_NODE_ADDRESS}"
contexts:
  - name: local 
    context:
      cluster: local
      user: local 
current-context: local
users:
  - name: local
    user:
      client-certificate: /etc/kubernetes/ssl/${cert}
      client-key: /etc/kubernetes/ssl/${key}
EOF
}
